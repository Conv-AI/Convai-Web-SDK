/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rpc_arkit_blend_shapes_pb = require('./rpc/arkit_blend_shapes_pb.js');
goog.exportSymbol('proto.service.ActionConfig', null, global);
goog.exportSymbol('proto.service.ActionConfig.Character', null, global);
goog.exportSymbol('proto.service.ActionConfig.Object', null, global);
goog.exportSymbol('proto.service.AudioConfig', null, global);
goog.exportSymbol('proto.service.BlendShapesData', null, global);
goog.exportSymbol('proto.service.FaceModel', null, global);
goog.exportSymbol('proto.service.FeedbackRequest', null, global);
goog.exportSymbol('proto.service.FeedbackRequest.Feedback', null, global);
goog.exportSymbol('proto.service.FeedbackResponse', null, global);
goog.exportSymbol('proto.service.GetResponseRequest', null, global);
goog.exportSymbol('proto.service.GetResponseRequest.GetResponseConfig', null, global);
goog.exportSymbol('proto.service.GetResponseRequest.GetResponseData', null, global);
goog.exportSymbol('proto.service.GetResponseRequestSingle', null, global);
goog.exportSymbol('proto.service.GetResponseResponse', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.ActionResponse', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.AudioResponse', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.BehaviorTreeResponse', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.UserTranscript', null, global);
goog.exportSymbol('proto.service.HelloRequest', null, global);
goog.exportSymbol('proto.service.HelloResponse', null, global);
goog.exportSymbol('proto.service.STTRequest', null, global);
goog.exportSymbol('proto.service.STTResponse', null, global);
goog.exportSymbol('proto.service.TriggerConfig', null, global);
goog.exportSymbol('proto.service.Viseme', null, global);
goog.exportSymbol('proto.service.VisemesData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.AudioConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.AudioConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.AudioConfig.displayName = 'proto.service.AudioConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.AudioConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.service.AudioConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.AudioConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.AudioConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleRateHertz: jspb.Message.getFieldWithDefault(msg, 1, 0),
    disableAudio: jspb.Message.getFieldWithDefault(msg, 2, false),
    enableFacialData: jspb.Message.getFieldWithDefault(msg, 3, false),
    faceModel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    enableFacialEmotionData: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.AudioConfig}
 */
proto.service.AudioConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.AudioConfig;
  return proto.service.AudioConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.AudioConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.AudioConfig}
 */
proto.service.AudioConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleRateHertz(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableAudio(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableFacialData(value);
      break;
    case 4:
      var value = /** @type {!proto.service.FaceModel} */ (reader.readEnum());
      msg.setFaceModel(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableFacialEmotionData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.AudioConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.AudioConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.AudioConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.AudioConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRateHertz();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDisableAudio();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEnableFacialData();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFaceModel();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEnableFacialEmotionData();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 sample_rate_hertz = 1;
 * @return {number}
 */
proto.service.AudioConfig.prototype.getSampleRateHertz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.service.AudioConfig.prototype.setSampleRateHertz = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool disable_audio = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.service.AudioConfig.prototype.getDisableAudio = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.service.AudioConfig.prototype.setDisableAudio = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool enable_facial_data = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.service.AudioConfig.prototype.getEnableFacialData = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.service.AudioConfig.prototype.setEnableFacialData = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional FaceModel face_model = 4;
 * @return {!proto.service.FaceModel}
 */
proto.service.AudioConfig.prototype.getFaceModel = function() {
  return /** @type {!proto.service.FaceModel} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.service.FaceModel} value */
proto.service.AudioConfig.prototype.setFaceModel = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool enable_facial_emotion_data = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.service.AudioConfig.prototype.getEnableFacialEmotionData = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.service.AudioConfig.prototype.setEnableFacialEmotionData = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.TriggerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.TriggerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.TriggerConfig.displayName = 'proto.service.TriggerConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.TriggerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.service.TriggerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.TriggerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.TriggerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    triggerName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    triggerMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.TriggerConfig}
 */
proto.service.TriggerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.TriggerConfig;
  return proto.service.TriggerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.TriggerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.TriggerConfig}
 */
proto.service.TriggerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.TriggerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.TriggerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.TriggerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.TriggerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTriggerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTriggerMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string trigger_name = 1;
 * @return {string}
 */
proto.service.TriggerConfig.prototype.getTriggerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.TriggerConfig.prototype.setTriggerName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trigger_message = 2;
 * @return {string}
 */
proto.service.TriggerConfig.prototype.getTriggerMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.TriggerConfig.prototype.setTriggerMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ActionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.ActionConfig.repeatedFields_, null);
};
goog.inherits(proto.service.ActionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.ActionConfig.displayName = 'proto.service.ActionConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.ActionConfig.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ActionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ActionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ActionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.getRepeatedField(msg, 1),
    charactersList: jspb.Message.toObjectList(msg.getCharactersList(),
    proto.service.ActionConfig.Character.toObject, includeInstance),
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.service.ActionConfig.Object.toObject, includeInstance),
    classification: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contextLevel: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currentAttentionObject: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ActionConfig}
 */
proto.service.ActionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ActionConfig;
  return proto.service.ActionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ActionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ActionConfig}
 */
proto.service.ActionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addActions(value);
      break;
    case 2:
      var value = new proto.service.ActionConfig.Character;
      reader.readMessage(value,proto.service.ActionConfig.Character.deserializeBinaryFromReader);
      msg.addCharacters(value);
      break;
    case 3:
      var value = new proto.service.ActionConfig.Object;
      reader.readMessage(value,proto.service.ActionConfig.Object.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassification(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContextLevel(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentAttentionObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ActionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ActionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ActionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getCharactersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.service.ActionConfig.Character.serializeBinaryToWriter
    );
  }
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.service.ActionConfig.Object.serializeBinaryToWriter
    );
  }
  f = message.getClassification();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContextLevel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCurrentAttentionObject();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ActionConfig.Character = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ActionConfig.Character, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.ActionConfig.Character.displayName = 'proto.service.ActionConfig.Character';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ActionConfig.Character.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ActionConfig.Character.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ActionConfig.Character} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Character.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bio: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ActionConfig.Character}
 */
proto.service.ActionConfig.Character.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ActionConfig.Character;
  return proto.service.ActionConfig.Character.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ActionConfig.Character} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ActionConfig.Character}
 */
proto.service.ActionConfig.Character.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ActionConfig.Character.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ActionConfig.Character.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ActionConfig.Character} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Character.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBio();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.ActionConfig.Character.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.ActionConfig.Character.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bio = 2;
 * @return {string}
 */
proto.service.ActionConfig.Character.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.ActionConfig.Character.prototype.setBio = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ActionConfig.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ActionConfig.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.ActionConfig.Object.displayName = 'proto.service.ActionConfig.Object';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ActionConfig.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ActionConfig.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ActionConfig.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ActionConfig.Object}
 */
proto.service.ActionConfig.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ActionConfig.Object;
  return proto.service.ActionConfig.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ActionConfig.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ActionConfig.Object}
 */
proto.service.ActionConfig.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ActionConfig.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ActionConfig.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ActionConfig.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.ActionConfig.Object.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.ActionConfig.Object.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.service.ActionConfig.Object.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.ActionConfig.Object.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string actions = 1;
 * @return {!Array<string>}
 */
proto.service.ActionConfig.prototype.getActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.service.ActionConfig.prototype.setActionsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.service.ActionConfig.prototype.addActions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.service.ActionConfig.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * repeated Character characters = 2;
 * @return {!Array<!proto.service.ActionConfig.Character>}
 */
proto.service.ActionConfig.prototype.getCharactersList = function() {
  return /** @type{!Array<!proto.service.ActionConfig.Character>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.ActionConfig.Character, 2));
};


/** @param {!Array<!proto.service.ActionConfig.Character>} value */
proto.service.ActionConfig.prototype.setCharactersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.service.ActionConfig.Character=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.ActionConfig.Character}
 */
proto.service.ActionConfig.prototype.addCharacters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.service.ActionConfig.Character, opt_index);
};


proto.service.ActionConfig.prototype.clearCharactersList = function() {
  this.setCharactersList([]);
};


/**
 * repeated Object objects = 3;
 * @return {!Array<!proto.service.ActionConfig.Object>}
 */
proto.service.ActionConfig.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.service.ActionConfig.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.ActionConfig.Object, 3));
};


/** @param {!Array<!proto.service.ActionConfig.Object>} value */
proto.service.ActionConfig.prototype.setObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.service.ActionConfig.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.ActionConfig.Object}
 */
proto.service.ActionConfig.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.service.ActionConfig.Object, opt_index);
};


proto.service.ActionConfig.prototype.clearObjectsList = function() {
  this.setObjectsList([]);
};


/**
 * optional string classification = 4;
 * @return {string}
 */
proto.service.ActionConfig.prototype.getClassification = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.service.ActionConfig.prototype.setClassification = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 context_level = 5;
 * @return {number}
 */
proto.service.ActionConfig.prototype.getContextLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.service.ActionConfig.prototype.setContextLevel = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string current_attention_object = 6;
 * @return {string}
 */
proto.service.ActionConfig.prototype.getCurrentAttentionObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.service.ActionConfig.prototype.setCurrentAttentionObject = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.STTRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.STTRequest.oneofGroups_);
};
goog.inherits(proto.service.STTRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.STTRequest.displayName = 'proto.service.STTRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.STTRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.service.STTRequest.RequestTypeCase = {
  REQUEST_TYPE_NOT_SET: 0,
  AUDIO_CONFIG: 1,
  AUDIO_CHUNK: 2
};

/**
 * @return {proto.service.STTRequest.RequestTypeCase}
 */
proto.service.STTRequest.prototype.getRequestTypeCase = function() {
  return /** @type {proto.service.STTRequest.RequestTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.STTRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.STTRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.STTRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.STTRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioConfig: (f = msg.getAudioConfig()) && proto.service.AudioConfig.toObject(includeInstance, f),
    audioChunk: msg.getAudioChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.STTRequest}
 */
proto.service.STTRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.STTRequest;
  return proto.service.STTRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.STTRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.STTRequest}
 */
proto.service.STTRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.AudioConfig;
      reader.readMessage(value,proto.service.AudioConfig.deserializeBinaryFromReader);
      msg.setAudioConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.STTRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.STTRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.STTRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.AudioConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional AudioConfig audio_config = 1;
 * @return {?proto.service.AudioConfig}
 */
proto.service.STTRequest.prototype.getAudioConfig = function() {
  return /** @type{?proto.service.AudioConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.AudioConfig, 1));
};


/** @param {?proto.service.AudioConfig|undefined} value */
proto.service.STTRequest.prototype.setAudioConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.service.STTRequest.oneofGroups_[0], value);
};


proto.service.STTRequest.prototype.clearAudioConfig = function() {
  this.setAudioConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.STTRequest.prototype.hasAudioConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audio_chunk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.service.STTRequest.prototype.getAudioChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audio_chunk = 2;
 * This is a type-conversion wrapper around `getAudioChunk()`
 * @return {string}
 */
proto.service.STTRequest.prototype.getAudioChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioChunk()));
};


/**
 * optional bytes audio_chunk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioChunk()`
 * @return {!Uint8Array}
 */
proto.service.STTRequest.prototype.getAudioChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioChunk()));
};


/** @param {!(string|Uint8Array)} value */
proto.service.STTRequest.prototype.setAudioChunk = function(value) {
  jspb.Message.setOneofField(this, 2, proto.service.STTRequest.oneofGroups_[0], value);
};


proto.service.STTRequest.prototype.clearAudioChunk = function() {
  jspb.Message.setOneofField(this, 2, proto.service.STTRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.STTRequest.prototype.hasAudioChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.STTResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.STTResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.STTResponse.displayName = 'proto.service.STTResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.STTResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.STTResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.STTResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.STTResponse}
 */
proto.service.STTResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.STTResponse;
  return proto.service.STTResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.STTResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.STTResponse}
 */
proto.service.STTResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.STTResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.STTResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.STTResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.service.STTResponse.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.STTResponse.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.GetResponseRequest.oneofGroups_);
};
goog.inherits(proto.service.GetResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseRequest.displayName = 'proto.service.GetResponseRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.GetResponseRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.service.GetResponseRequest.RequestTypeCase = {
  REQUEST_TYPE_NOT_SET: 0,
  GET_RESPONSE_CONFIG: 1,
  GET_RESPONSE_DATA: 2
};

/**
 * @return {proto.service.GetResponseRequest.RequestTypeCase}
 */
proto.service.GetResponseRequest.prototype.getRequestTypeCase = function() {
  return /** @type {proto.service.GetResponseRequest.RequestTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.GetResponseRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    getResponseConfig: (f = msg.getGetResponseConfig()) && proto.service.GetResponseRequest.GetResponseConfig.toObject(includeInstance, f),
    getResponseData: (f = msg.getGetResponseData()) && proto.service.GetResponseRequest.GetResponseData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequest;
  return proto.service.GetResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.GetResponseRequest.GetResponseConfig;
      reader.readMessage(value,proto.service.GetResponseRequest.GetResponseConfig.deserializeBinaryFromReader);
      msg.setGetResponseConfig(value);
      break;
    case 2:
      var value = new proto.service.GetResponseRequest.GetResponseData;
      reader.readMessage(value,proto.service.GetResponseRequest.GetResponseData.deserializeBinaryFromReader);
      msg.setGetResponseData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetResponseConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.GetResponseRequest.GetResponseConfig.serializeBinaryToWriter
    );
  }
  f = message.getGetResponseData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.GetResponseRequest.GetResponseData.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequest.GetResponseConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseRequest.GetResponseConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseRequest.GetResponseConfig.displayName = 'proto.service.GetResponseRequest.GetResponseConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequest.GetResponseConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequest.GetResponseConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apiKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    audioConfig: (f = msg.getAudioConfig()) && proto.service.AudioConfig.toObject(includeInstance, f),
    actionConfig: (f = msg.getActionConfig()) && proto.service.ActionConfig.toObject(includeInstance, f),
    speaker: jspb.Message.getFieldWithDefault(msg, 7, ""),
    languageCode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    speakerId: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequest.GetResponseConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequest.GetResponseConfig;
  return proto.service.GetResponseRequest.GetResponseConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequest.GetResponseConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequest.GetResponseConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 5:
      var value = new proto.service.AudioConfig;
      reader.readMessage(value,proto.service.AudioConfig.deserializeBinaryFromReader);
      msg.setAudioConfig(value);
      break;
    case 6:
      var value = new proto.service.ActionConfig;
      reader.readMessage(value,proto.service.ActionConfig.deserializeBinaryFromReader);
      msg.setActionConfig(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeaker(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequest.GetResponseConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequest.GetResponseConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAudioConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.service.AudioConfig.serializeBinaryToWriter
    );
  }
  f = message.getActionConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.service.ActionConfig.serializeBinaryToWriter
    );
  }
  f = message.getSpeaker();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSpeakerId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string character_id = 2;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getCharacterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setCharacterId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string api_key = 3;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setApiKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string session_id = 4;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional AudioConfig audio_config = 5;
 * @return {?proto.service.AudioConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getAudioConfig = function() {
  return /** @type{?proto.service.AudioConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.AudioConfig, 5));
};


/** @param {?proto.service.AudioConfig|undefined} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setAudioConfig = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.service.GetResponseRequest.GetResponseConfig.prototype.clearAudioConfig = function() {
  this.setAudioConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.hasAudioConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ActionConfig action_config = 6;
 * @return {?proto.service.ActionConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getActionConfig = function() {
  return /** @type{?proto.service.ActionConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.ActionConfig, 6));
};


/** @param {?proto.service.ActionConfig|undefined} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setActionConfig = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.service.GetResponseRequest.GetResponseConfig.prototype.clearActionConfig = function() {
  this.setActionConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.hasActionConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string speaker = 7;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getSpeaker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setSpeaker = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string language_code = 8;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setLanguageCode = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string speaker_id = 9;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getSpeakerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setSpeakerId = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequest.GetResponseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.GetResponseRequest.GetResponseData.oneofGroups_);
};
goog.inherits(proto.service.GetResponseRequest.GetResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseRequest.GetResponseData.displayName = 'proto.service.GetResponseRequest.GetResponseData';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.GetResponseRequest.GetResponseData.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.service.GetResponseRequest.GetResponseData.InputTypeCase = {
  INPUT_TYPE_NOT_SET: 0,
  AUDIO_DATA: 1,
  TEXT_DATA: 2,
  TRIGGER_DATA: 3
};

/**
 * @return {proto.service.GetResponseRequest.GetResponseData.InputTypeCase}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getInputTypeCase = function() {
  return /** @type {proto.service.GetResponseRequest.GetResponseData.InputTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequest.GetResponseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequest.GetResponseData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioData: msg.getAudioData_asB64(),
    textData: jspb.Message.getFieldWithDefault(msg, 2, ""),
    triggerData: (f = msg.getTriggerData()) && proto.service.TriggerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequest.GetResponseData}
 */
proto.service.GetResponseRequest.GetResponseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequest.GetResponseData;
  return proto.service.GetResponseRequest.GetResponseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequest.GetResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequest.GetResponseData}
 */
proto.service.GetResponseRequest.GetResponseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextData(value);
      break;
    case 3:
      var value = new proto.service.TriggerConfig;
      reader.readMessage(value,proto.service.TriggerConfig.deserializeBinaryFromReader);
      msg.setTriggerData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequest.GetResponseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequest.GetResponseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTriggerData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.service.TriggerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes audio_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getAudioData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes audio_data = 1;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/** @param {!(string|Uint8Array)} value */
proto.service.GetResponseRequest.GetResponseData.prototype.setAudioData = function(value) {
  jspb.Message.setOneofField(this, 1, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], value);
};


proto.service.GetResponseRequest.GetResponseData.prototype.clearAudioData = function() {
  jspb.Message.setOneofField(this, 1, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.hasAudioData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text_data = 2;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getTextData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.GetResponseRequest.GetResponseData.prototype.setTextData = function(value) {
  jspb.Message.setOneofField(this, 2, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], value);
};


proto.service.GetResponseRequest.GetResponseData.prototype.clearTextData = function() {
  jspb.Message.setOneofField(this, 2, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.hasTextData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TriggerConfig trigger_data = 3;
 * @return {?proto.service.TriggerConfig}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getTriggerData = function() {
  return /** @type{?proto.service.TriggerConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.TriggerConfig, 3));
};


/** @param {?proto.service.TriggerConfig|undefined} value */
proto.service.GetResponseRequest.GetResponseData.prototype.setTriggerData = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], value);
};


proto.service.GetResponseRequest.GetResponseData.prototype.clearTriggerData = function() {
  this.setTriggerData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.hasTriggerData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetResponseConfig get_response_config = 1;
 * @return {?proto.service.GetResponseRequest.GetResponseConfig}
 */
proto.service.GetResponseRequest.prototype.getGetResponseConfig = function() {
  return /** @type{?proto.service.GetResponseRequest.GetResponseConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest.GetResponseConfig, 1));
};


/** @param {?proto.service.GetResponseRequest.GetResponseConfig|undefined} value */
proto.service.GetResponseRequest.prototype.setGetResponseConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.service.GetResponseRequest.oneofGroups_[0], value);
};


proto.service.GetResponseRequest.prototype.clearGetResponseConfig = function() {
  this.setGetResponseConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequest.prototype.hasGetResponseConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetResponseData get_response_data = 2;
 * @return {?proto.service.GetResponseRequest.GetResponseData}
 */
proto.service.GetResponseRequest.prototype.getGetResponseData = function() {
  return /** @type{?proto.service.GetResponseRequest.GetResponseData} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest.GetResponseData, 2));
};


/** @param {?proto.service.GetResponseRequest.GetResponseData|undefined} value */
proto.service.GetResponseRequest.prototype.setGetResponseData = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.service.GetResponseRequest.oneofGroups_[0], value);
};


proto.service.GetResponseRequest.prototype.clearGetResponseData = function() {
  this.setGetResponseData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequest.prototype.hasGetResponseData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequestSingle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseRequestSingle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseRequestSingle.displayName = 'proto.service.GetResponseRequestSingle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequestSingle.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequestSingle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequestSingle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequestSingle.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseConfig: (f = msg.getResponseConfig()) && proto.service.GetResponseRequest.toObject(includeInstance, f),
    responseData: (f = msg.getResponseData()) && proto.service.GetResponseRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequestSingle}
 */
proto.service.GetResponseRequestSingle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequestSingle;
  return proto.service.GetResponseRequestSingle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequestSingle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequestSingle}
 */
proto.service.GetResponseRequestSingle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.GetResponseRequest;
      reader.readMessage(value,proto.service.GetResponseRequest.deserializeBinaryFromReader);
      msg.setResponseConfig(value);
      break;
    case 2:
      var value = new proto.service.GetResponseRequest;
      reader.readMessage(value,proto.service.GetResponseRequest.deserializeBinaryFromReader);
      msg.setResponseData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequestSingle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequestSingle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequestSingle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequestSingle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.GetResponseRequest.serializeBinaryToWriter
    );
  }
  f = message.getResponseData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.GetResponseRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetResponseRequest response_config = 1;
 * @return {?proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequestSingle.prototype.getResponseConfig = function() {
  return /** @type{?proto.service.GetResponseRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest, 1));
};


/** @param {?proto.service.GetResponseRequest|undefined} value */
proto.service.GetResponseRequestSingle.prototype.setResponseConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.service.GetResponseRequestSingle.prototype.clearResponseConfig = function() {
  this.setResponseConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequestSingle.prototype.hasResponseConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetResponseRequest response_data = 2;
 * @return {?proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequestSingle.prototype.getResponseData = function() {
  return /** @type{?proto.service.GetResponseRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest, 2));
};


/** @param {?proto.service.GetResponseRequest|undefined} value */
proto.service.GetResponseRequestSingle.prototype.setResponseData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.GetResponseRequestSingle.prototype.clearResponseData = function() {
  this.setResponseData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseRequestSingle.prototype.hasResponseData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.GetResponseResponse.oneofGroups_);
};
goog.inherits(proto.service.GetResponseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseResponse.displayName = 'proto.service.GetResponseResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.GetResponseResponse.oneofGroups_ = [[2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.service.GetResponseResponse.ResponseTypeCase = {
  RESPONSE_TYPE_NOT_SET: 0,
  ACTION_RESPONSE: 2,
  AUDIO_RESPONSE: 3,
  DEBUG_LOG: 4,
  USER_QUERY: 5,
  BT_RESPONSE: 6,
  EMOTION_RESPONSE: 7,
  INTERACTION_ID: 8
};

/**
 * @return {proto.service.GetResponseResponse.ResponseTypeCase}
 */
proto.service.GetResponseResponse.prototype.getResponseTypeCase = function() {
  return /** @type {proto.service.GetResponseResponse.ResponseTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.GetResponseResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actionResponse: (f = msg.getActionResponse()) && proto.service.GetResponseResponse.ActionResponse.toObject(includeInstance, f),
    audioResponse: (f = msg.getAudioResponse()) && proto.service.GetResponseResponse.AudioResponse.toObject(includeInstance, f),
    debugLog: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userQuery: (f = msg.getUserQuery()) && proto.service.GetResponseResponse.UserTranscript.toObject(includeInstance, f),
    btResponse: (f = msg.getBtResponse()) && proto.service.GetResponseResponse.BehaviorTreeResponse.toObject(includeInstance, f),
    emotionResponse: jspb.Message.getFieldWithDefault(msg, 7, ""),
    interactionId: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse}
 */
proto.service.GetResponseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse;
  return proto.service.GetResponseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse}
 */
proto.service.GetResponseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new proto.service.GetResponseResponse.ActionResponse;
      reader.readMessage(value,proto.service.GetResponseResponse.ActionResponse.deserializeBinaryFromReader);
      msg.setActionResponse(value);
      break;
    case 3:
      var value = new proto.service.GetResponseResponse.AudioResponse;
      reader.readMessage(value,proto.service.GetResponseResponse.AudioResponse.deserializeBinaryFromReader);
      msg.setAudioResponse(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugLog(value);
      break;
    case 5:
      var value = new proto.service.GetResponseResponse.UserTranscript;
      reader.readMessage(value,proto.service.GetResponseResponse.UserTranscript.deserializeBinaryFromReader);
      msg.setUserQuery(value);
      break;
    case 6:
      var value = new proto.service.GetResponseResponse.BehaviorTreeResponse;
      reader.readMessage(value,proto.service.GetResponseResponse.BehaviorTreeResponse.deserializeBinaryFromReader);
      msg.setBtResponse(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmotionResponse(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.GetResponseResponse.ActionResponse.serializeBinaryToWriter
    );
  }
  f = message.getAudioResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.service.GetResponseResponse.AudioResponse.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserQuery();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.service.GetResponseResponse.UserTranscript.serializeBinaryToWriter
    );
  }
  f = message.getBtResponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.service.GetResponseResponse.BehaviorTreeResponse.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse.AudioResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.GetResponseResponse.AudioResponse.oneofGroups_);
};
goog.inherits(proto.service.GetResponseResponse.AudioResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseResponse.AudioResponse.displayName = 'proto.service.GetResponseResponse.AudioResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.GetResponseResponse.AudioResponse.oneofGroups_ = [[6,7]];

/**
 * @enum {number}
 */
proto.service.GetResponseResponse.AudioResponse.FaceDataTypeCase = {
  FACE_DATA_TYPE_NOT_SET: 0,
  VISEMES_DATA: 6,
  BLENDSHAPES_DATA: 7
};

/**
 * @return {proto.service.GetResponseResponse.AudioResponse.FaceDataTypeCase}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getFaceDataTypeCase = function() {
  return /** @type {proto.service.GetResponseResponse.AudioResponse.FaceDataTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.GetResponseResponse.AudioResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.AudioResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse.AudioResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.AudioResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioData: msg.getAudioData_asB64(),
    audioConfig: (f = msg.getAudioConfig()) && proto.service.AudioConfig.toObject(includeInstance, f),
    textData: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endOfResponse: jspb.Message.getFieldWithDefault(msg, 4, false),
    faceData: jspb.Message.getFieldWithDefault(msg, 5, ""),
    visemesData: (f = msg.getVisemesData()) && proto.service.VisemesData.toObject(includeInstance, f),
    blendshapesData: (f = msg.getBlendshapesData()) && proto.service.BlendShapesData.toObject(includeInstance, f),
    faceEmotion: (f = msg.getFaceEmotion()) && rpc_arkit_blend_shapes_pb.ARKitBlendShapesData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse.AudioResponse}
 */
proto.service.GetResponseResponse.AudioResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse.AudioResponse;
  return proto.service.GetResponseResponse.AudioResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse.AudioResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse.AudioResponse}
 */
proto.service.GetResponseResponse.AudioResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    case 2:
      var value = new proto.service.AudioConfig;
      reader.readMessage(value,proto.service.AudioConfig.deserializeBinaryFromReader);
      msg.setAudioConfig(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextData(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndOfResponse(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceData(value);
      break;
    case 6:
      var value = new proto.service.VisemesData;
      reader.readMessage(value,proto.service.VisemesData.deserializeBinaryFromReader);
      msg.setVisemesData(value);
      break;
    case 7:
      var value = new proto.service.BlendShapesData;
      reader.readMessage(value,proto.service.BlendShapesData.deserializeBinaryFromReader);
      msg.setBlendshapesData(value);
      break;
    case 8:
      var value = new rpc_arkit_blend_shapes_pb.ARKitBlendShapesData;
      reader.readMessage(value,rpc_arkit_blend_shapes_pb.ARKitBlendShapesData.deserializeBinaryFromReader);
      msg.setFaceEmotion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.AudioResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse.AudioResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.AudioResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAudioConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.AudioConfig.serializeBinaryToWriter
    );
  }
  f = message.getTextData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndOfResponse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFaceData();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVisemesData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.service.VisemesData.serializeBinaryToWriter
    );
  }
  f = message.getBlendshapesData();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.service.BlendShapesData.serializeBinaryToWriter
    );
  }
  f = message.getFaceEmotion();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      rpc_arkit_blend_shapes_pb.ARKitBlendShapesData.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes audio_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes audio_data = 1;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/** @param {!(string|Uint8Array)} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setAudioData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AudioConfig audio_config = 2;
 * @return {?proto.service.AudioConfig}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioConfig = function() {
  return /** @type{?proto.service.AudioConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.AudioConfig, 2));
};


/** @param {?proto.service.AudioConfig|undefined} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setAudioConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.GetResponseResponse.AudioResponse.prototype.clearAudioConfig = function() {
  this.setAudioConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.hasAudioConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string text_data = 3;
 * @return {string}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getTextData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setTextData = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool end_of_response = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getEndOfResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setEndOfResponse = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string face_data = 5;
 * @return {string}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getFaceData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setFaceData = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional VisemesData visemes_data = 6;
 * @return {?proto.service.VisemesData}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getVisemesData = function() {
  return /** @type{?proto.service.VisemesData} */ (
    jspb.Message.getWrapperField(this, proto.service.VisemesData, 6));
};


/** @param {?proto.service.VisemesData|undefined} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setVisemesData = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.service.GetResponseResponse.AudioResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.AudioResponse.prototype.clearVisemesData = function() {
  this.setVisemesData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.hasVisemesData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BlendShapesData blendshapes_data = 7;
 * @return {?proto.service.BlendShapesData}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getBlendshapesData = function() {
  return /** @type{?proto.service.BlendShapesData} */ (
    jspb.Message.getWrapperField(this, proto.service.BlendShapesData, 7));
};


/** @param {?proto.service.BlendShapesData|undefined} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setBlendshapesData = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.service.GetResponseResponse.AudioResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.AudioResponse.prototype.clearBlendshapesData = function() {
  this.setBlendshapesData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.hasBlendshapesData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ARKitBlendShapesData face_emotion = 8;
 * @return {?proto.service.ARKitBlendShapesData}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getFaceEmotion = function() {
  return /** @type{?proto.service.ARKitBlendShapesData} */ (
    jspb.Message.getWrapperField(this, rpc_arkit_blend_shapes_pb.ARKitBlendShapesData, 8));
};


/** @param {?proto.service.ARKitBlendShapesData|undefined} value */
proto.service.GetResponseResponse.AudioResponse.prototype.setFaceEmotion = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.service.GetResponseResponse.AudioResponse.prototype.clearFaceEmotion = function() {
  this.setFaceEmotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.hasFaceEmotion = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse.ActionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseResponse.ActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseResponse.ActionResponse.displayName = 'proto.service.GetResponseResponse.ActionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.ActionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.ActionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse.ActionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.ActionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse.ActionResponse}
 */
proto.service.GetResponseResponse.ActionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse.ActionResponse;
  return proto.service.GetResponseResponse.ActionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse.ActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse.ActionResponse}
 */
proto.service.GetResponseResponse.ActionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.ActionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.ActionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse.ActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.ActionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.service.GetResponseResponse.ActionResponse.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.ActionResponse.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse.BehaviorTreeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseResponse.BehaviorTreeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseResponse.BehaviorTreeResponse.displayName = 'proto.service.GetResponseResponse.BehaviorTreeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.BehaviorTreeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse.BehaviorTreeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    btCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    btConstants: jspb.Message.getFieldWithDefault(msg, 2, ""),
    narrativeSectionId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse.BehaviorTreeResponse}
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse.BehaviorTreeResponse;
  return proto.service.GetResponseResponse.BehaviorTreeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse.BehaviorTreeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse.BehaviorTreeResponse}
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBtCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBtConstants(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNarrativeSectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.BehaviorTreeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse.BehaviorTreeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBtCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBtConstants();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNarrativeSectionId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string bt_code = 1;
 * @return {string}
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.getBtCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.setBtCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bt_constants = 2;
 * @return {string}
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.getBtConstants = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.setBtConstants = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string narrative_section_id = 3;
 * @return {string}
 */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.getNarrativeSectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.BehaviorTreeResponse.prototype.setNarrativeSectionId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse.UserTranscript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseResponse.UserTranscript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.GetResponseResponse.UserTranscript.displayName = 'proto.service.GetResponseResponse.UserTranscript';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.UserTranscript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse.UserTranscript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.UserTranscript.toObject = function(includeInstance, msg) {
  var f, obj = {
    textData: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isFinal: jspb.Message.getFieldWithDefault(msg, 2, false),
    endOfResponse: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse.UserTranscript}
 */
proto.service.GetResponseResponse.UserTranscript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse.UserTranscript;
  return proto.service.GetResponseResponse.UserTranscript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse.UserTranscript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse.UserTranscript}
 */
proto.service.GetResponseResponse.UserTranscript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndOfResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.UserTranscript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse.UserTranscript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.UserTranscript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEndOfResponse();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string text_data = 1;
 * @return {string}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.getTextData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.UserTranscript.prototype.setTextData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_final = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.service.GetResponseResponse.UserTranscript.prototype.setIsFinal = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool end_of_response = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.getEndOfResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.service.GetResponseResponse.UserTranscript.prototype.setEndOfResponse = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.service.GetResponseResponse.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActionResponse action_response = 2;
 * @return {?proto.service.GetResponseResponse.ActionResponse}
 */
proto.service.GetResponseResponse.prototype.getActionResponse = function() {
  return /** @type{?proto.service.GetResponseResponse.ActionResponse} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseResponse.ActionResponse, 2));
};


/** @param {?proto.service.GetResponseResponse.ActionResponse|undefined} value */
proto.service.GetResponseResponse.prototype.setActionResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.prototype.clearActionResponse = function() {
  this.setActionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.prototype.hasActionResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AudioResponse audio_response = 3;
 * @return {?proto.service.GetResponseResponse.AudioResponse}
 */
proto.service.GetResponseResponse.prototype.getAudioResponse = function() {
  return /** @type{?proto.service.GetResponseResponse.AudioResponse} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseResponse.AudioResponse, 3));
};


/** @param {?proto.service.GetResponseResponse.AudioResponse|undefined} value */
proto.service.GetResponseResponse.prototype.setAudioResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.prototype.clearAudioResponse = function() {
  this.setAudioResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.prototype.hasAudioResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string debug_log = 4;
 * @return {string}
 */
proto.service.GetResponseResponse.prototype.getDebugLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.prototype.setDebugLog = function(value) {
  jspb.Message.setOneofField(this, 4, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.prototype.clearDebugLog = function() {
  jspb.Message.setOneofField(this, 4, proto.service.GetResponseResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.prototype.hasDebugLog = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UserTranscript user_query = 5;
 * @return {?proto.service.GetResponseResponse.UserTranscript}
 */
proto.service.GetResponseResponse.prototype.getUserQuery = function() {
  return /** @type{?proto.service.GetResponseResponse.UserTranscript} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseResponse.UserTranscript, 5));
};


/** @param {?proto.service.GetResponseResponse.UserTranscript|undefined} value */
proto.service.GetResponseResponse.prototype.setUserQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.prototype.clearUserQuery = function() {
  this.setUserQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.prototype.hasUserQuery = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BehaviorTreeResponse bt_response = 6;
 * @return {?proto.service.GetResponseResponse.BehaviorTreeResponse}
 */
proto.service.GetResponseResponse.prototype.getBtResponse = function() {
  return /** @type{?proto.service.GetResponseResponse.BehaviorTreeResponse} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseResponse.BehaviorTreeResponse, 6));
};


/** @param {?proto.service.GetResponseResponse.BehaviorTreeResponse|undefined} value */
proto.service.GetResponseResponse.prototype.setBtResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.prototype.clearBtResponse = function() {
  this.setBtResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.prototype.hasBtResponse = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string emotion_response = 7;
 * @return {string}
 */
proto.service.GetResponseResponse.prototype.getEmotionResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.prototype.setEmotionResponse = function(value) {
  jspb.Message.setOneofField(this, 7, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.prototype.clearEmotionResponse = function() {
  jspb.Message.setOneofField(this, 7, proto.service.GetResponseResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.prototype.hasEmotionResponse = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string interaction_id = 8;
 * @return {string}
 */
proto.service.GetResponseResponse.prototype.getInteractionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.service.GetResponseResponse.prototype.setInteractionId = function(value) {
  jspb.Message.setOneofField(this, 8, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


proto.service.GetResponseResponse.prototype.clearInteractionId = function() {
  jspb.Message.setOneofField(this, 8, proto.service.GetResponseResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.GetResponseResponse.prototype.hasInteractionId = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.VisemesData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.VisemesData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.VisemesData.displayName = 'proto.service.VisemesData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.VisemesData.prototype.toObject = function(opt_includeInstance) {
  return proto.service.VisemesData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.VisemesData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.VisemesData.toObject = function(includeInstance, msg) {
  var f, obj = {
    visemes: (f = msg.getVisemes()) && proto.service.Viseme.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.VisemesData}
 */
proto.service.VisemesData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.VisemesData;
  return proto.service.VisemesData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.VisemesData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.VisemesData}
 */
proto.service.VisemesData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.Viseme;
      reader.readMessage(value,proto.service.Viseme.deserializeBinaryFromReader);
      msg.setVisemes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.VisemesData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.VisemesData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.VisemesData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.VisemesData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisemes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.Viseme.serializeBinaryToWriter
    );
  }
};


/**
 * optional Viseme visemes = 1;
 * @return {?proto.service.Viseme}
 */
proto.service.VisemesData.prototype.getVisemes = function() {
  return /** @type{?proto.service.Viseme} */ (
    jspb.Message.getWrapperField(this, proto.service.Viseme, 1));
};


/** @param {?proto.service.Viseme|undefined} value */
proto.service.VisemesData.prototype.setVisemes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.service.VisemesData.prototype.clearVisemes = function() {
  this.setVisemes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.VisemesData.prototype.hasVisemes = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.Viseme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.Viseme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.Viseme.displayName = 'proto.service.Viseme';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.Viseme.prototype.toObject = function(opt_includeInstance) {
  return proto.service.Viseme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.Viseme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Viseme.toObject = function(includeInstance, msg) {
  var f, obj = {
    sil: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    pp: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    ff: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    th: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    dd: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    kk: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    ch: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    ss: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    nn: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    rr: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    aa: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    e: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    ih: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    oh: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    ou: +jspb.Message.getFieldWithDefault(msg, 15, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.Viseme}
 */
proto.service.Viseme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.Viseme;
  return proto.service.Viseme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.Viseme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.Viseme}
 */
proto.service.Viseme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSil(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFf(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTh(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDd(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKk(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCh(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNn(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRr(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAa(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setE(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIh(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOh(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.Viseme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.Viseme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.Viseme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Viseme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSil();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPp();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getFf();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTh();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getDd();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getKk();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getCh();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getSs();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getNn();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getRr();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getAa();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getE();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getIh();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getOh();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getOu();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
};


/**
 * optional float sil = 1;
 * @return {number}
 */
proto.service.Viseme.prototype.getSil = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setSil = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pp = 2;
 * @return {number}
 */
proto.service.Viseme.prototype.getPp = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setPp = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float ff = 3;
 * @return {number}
 */
proto.service.Viseme.prototype.getFf = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setFf = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float th = 4;
 * @return {number}
 */
proto.service.Viseme.prototype.getTh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setTh = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float dd = 5;
 * @return {number}
 */
proto.service.Viseme.prototype.getDd = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setDd = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float kk = 6;
 * @return {number}
 */
proto.service.Viseme.prototype.getKk = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setKk = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float ch = 7;
 * @return {number}
 */
proto.service.Viseme.prototype.getCh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setCh = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float ss = 8;
 * @return {number}
 */
proto.service.Viseme.prototype.getSs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setSs = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float nn = 9;
 * @return {number}
 */
proto.service.Viseme.prototype.getNn = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setNn = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float rr = 10;
 * @return {number}
 */
proto.service.Viseme.prototype.getRr = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setRr = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float aa = 11;
 * @return {number}
 */
proto.service.Viseme.prototype.getAa = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setAa = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float e = 12;
 * @return {number}
 */
proto.service.Viseme.prototype.getE = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setE = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float ih = 13;
 * @return {number}
 */
proto.service.Viseme.prototype.getIh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setIh = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float oh = 14;
 * @return {number}
 */
proto.service.Viseme.prototype.getOh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setOh = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float ou = 15;
 * @return {number}
 */
proto.service.Viseme.prototype.getOu = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.service.Viseme.prototype.setOu = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.BlendShapesData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.BlendShapesData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.BlendShapesData.displayName = 'proto.service.BlendShapesData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.BlendShapesData.prototype.toObject = function(opt_includeInstance) {
  return proto.service.BlendShapesData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.BlendShapesData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.BlendShapesData.toObject = function(includeInstance, msg) {
  var f, obj = {
    blendshapeData: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.BlendShapesData}
 */
proto.service.BlendShapesData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.BlendShapesData;
  return proto.service.BlendShapesData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.BlendShapesData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.BlendShapesData}
 */
proto.service.BlendShapesData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlendshapeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.BlendShapesData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.BlendShapesData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.BlendShapesData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.BlendShapesData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlendshapeData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string blendshape_data = 1;
 * @return {string}
 */
proto.service.BlendShapesData.prototype.getBlendshapeData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.BlendShapesData.prototype.setBlendshapeData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.HelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.HelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.HelloRequest.displayName = 'proto.service.HelloRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.HelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.HelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.HelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.HelloRequest}
 */
proto.service.HelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.HelloRequest;
  return proto.service.HelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.HelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.HelloRequest}
 */
proto.service.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.HelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.HelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.HelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.HelloRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.HelloRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.HelloResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.HelloResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.HelloResponse.displayName = 'proto.service.HelloResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.HelloResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.HelloResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.HelloResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.HelloResponse}
 */
proto.service.HelloResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.HelloResponse;
  return proto.service.HelloResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.HelloResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.HelloResponse}
 */
proto.service.HelloResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.HelloResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.HelloResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.HelloResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.service.HelloResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.HelloResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.FeedbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.FeedbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.FeedbackRequest.displayName = 'proto.service.FeedbackRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.FeedbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.FeedbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.FeedbackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.FeedbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    characterId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    textFeedback: (f = msg.getTextFeedback()) && proto.service.FeedbackRequest.Feedback.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.FeedbackRequest}
 */
proto.service.FeedbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.FeedbackRequest;
  return proto.service.FeedbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.FeedbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.FeedbackRequest}
 */
proto.service.FeedbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 5:
      var value = new proto.service.FeedbackRequest.Feedback;
      reader.readMessage(value,proto.service.FeedbackRequest.Feedback.deserializeBinaryFromReader);
      msg.setTextFeedback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.FeedbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.FeedbackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.FeedbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.FeedbackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCharacterId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTextFeedback();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.service.FeedbackRequest.Feedback.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.FeedbackRequest.Feedback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.FeedbackRequest.Feedback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.FeedbackRequest.Feedback.displayName = 'proto.service.FeedbackRequest.Feedback';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.FeedbackRequest.Feedback.prototype.toObject = function(opt_includeInstance) {
  return proto.service.FeedbackRequest.Feedback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.FeedbackRequest.Feedback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.FeedbackRequest.Feedback.toObject = function(includeInstance, msg) {
  var f, obj = {
    thumbsUp: jspb.Message.getFieldWithDefault(msg, 1, false),
    feedbackText: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.FeedbackRequest.Feedback}
 */
proto.service.FeedbackRequest.Feedback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.FeedbackRequest.Feedback;
  return proto.service.FeedbackRequest.Feedback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.FeedbackRequest.Feedback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.FeedbackRequest.Feedback}
 */
proto.service.FeedbackRequest.Feedback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setThumbsUp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedbackText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.FeedbackRequest.Feedback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.FeedbackRequest.Feedback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.FeedbackRequest.Feedback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.FeedbackRequest.Feedback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThumbsUp();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFeedbackText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool thumbs_up = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.service.FeedbackRequest.Feedback.prototype.getThumbsUp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.service.FeedbackRequest.Feedback.prototype.setThumbsUp = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string feedback_text = 2;
 * @return {string}
 */
proto.service.FeedbackRequest.Feedback.prototype.getFeedbackText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.FeedbackRequest.Feedback.prototype.setFeedbackText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string interaction_id = 1;
 * @return {string}
 */
proto.service.FeedbackRequest.prototype.getInteractionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.FeedbackRequest.prototype.setInteractionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string character_id = 2;
 * @return {string}
 */
proto.service.FeedbackRequest.prototype.getCharacterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.service.FeedbackRequest.prototype.setCharacterId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string session_id = 3;
 * @return {string}
 */
proto.service.FeedbackRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.service.FeedbackRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Feedback text_feedback = 5;
 * @return {?proto.service.FeedbackRequest.Feedback}
 */
proto.service.FeedbackRequest.prototype.getTextFeedback = function() {
  return /** @type{?proto.service.FeedbackRequest.Feedback} */ (
    jspb.Message.getWrapperField(this, proto.service.FeedbackRequest.Feedback, 5));
};


/** @param {?proto.service.FeedbackRequest.Feedback|undefined} value */
proto.service.FeedbackRequest.prototype.setTextFeedback = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.service.FeedbackRequest.prototype.clearTextFeedback = function() {
  this.setTextFeedback(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.service.FeedbackRequest.prototype.hasTextFeedback = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.FeedbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.FeedbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.FeedbackResponse.displayName = 'proto.service.FeedbackResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.FeedbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.FeedbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.FeedbackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.FeedbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedbackResponse: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.FeedbackResponse}
 */
proto.service.FeedbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.FeedbackResponse;
  return proto.service.FeedbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.FeedbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.FeedbackResponse}
 */
proto.service.FeedbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedbackResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.FeedbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.FeedbackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.FeedbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.FeedbackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedbackResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string feedback_response = 1;
 * @return {string}
 */
proto.service.FeedbackResponse.prototype.getFeedbackResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.FeedbackResponse.prototype.setFeedbackResponse = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.service.FaceModel = {
  FACE_MODEL_UNSPECIFIED: 0,
  FACE_MODEL_A_2F_MODEL_NAME: 1,
  FACE_MODEL_PHONEMES_MODEL_NAME: 2,
  FACE_MODEL_OVR_MODEL_NAME: 3
};

goog.object.extend(exports, proto.service);
