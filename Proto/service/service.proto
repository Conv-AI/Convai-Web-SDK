// service.proto
syntax = "proto3";
package service;
import "rpc/arkit_blend_shapes.proto";

service ConvaiService {
  rpc Hello(HelloRequest) returns (HelloResponse) {}
  rpc HelloStream(stream HelloRequest) returns (stream HelloResponse) {}

  rpc SpeechToText(stream STTRequest) returns (stream STTResponse) {}

  rpc GetResponse(stream GetResponseRequest) returns (stream GetResponseResponse) {}
  rpc GetResponseSingle(GetResponseRequestSingle) returns (stream GetResponseResponse) {}

  rpc SubmitFeedback(FeedbackRequest) returns (FeedbackResponse) {}

}

message AudioConfig {
  int32 sample_rate_hertz = 1;
  bool disable_audio = 2;
  bool enable_facial_data = 3;
  FaceModel face_model = 4;
  bool enable_facial_emotion_data = 5;
}

enum FaceModel {
  FACE_MODEL_UNSPECIFIED = 0;
  FACE_MODEL_A_2F_MODEL_NAME = 1;
  FACE_MODEL_PHONEMES_MODEL_NAME = 2;
  FACE_MODEL_OVR_MODEL_NAME = 3;
}

// The TriggerConfig message is a general container for various types of triggers.
// It includes the trigger type and message, as well as specific metadata based on the trigger type.
// 
// Fields:
// trigger_message: Specifies message related to the trigger: "5 Minutes have passed", "Player entered the palace".
message TriggerConfig{
  string trigger_name = 1;
  string trigger_message = 2;
}

// NEXT ID: 7
message ActionConfig {
  message Character {
    string name = 1;
    string bio = 2;
  }
  message Object {
    string name = 1;
    string description = 2;
  }
  repeated string actions = 1;
  repeated Character characters = 2;
  repeated Object objects = 3;
  string classification = 4;
  int32 context_level = 5;
  // This should be equal to the name of one of the objects in the Objects field.
  string current_attention_object = 6;
}

message STTRequest {
  oneof request_type {
    AudioConfig audio_config = 1;
    bytes audio_chunk = 2;
  }  
}

message STTResponse {
  string text = 1;
}

message GetResponseRequest {
  message GetResponseConfig {
    string character_id = 2;
    string api_key = 3;
    string session_id = 4;
    AudioConfig audio_config = 5;
    ActionConfig action_config = 6;
    string speaker = 7;
    string language_code = 8;
    string speaker_id = 9;
    
  }
  message GetResponseData {
    oneof input_type {
      bytes audio_data = 1;
      string text_data = 2;
      TriggerConfig trigger_data = 3;
    }
  }
  oneof request_type {
    GetResponseConfig get_response_config = 1;
    GetResponseData get_response_data = 2;
  }
}

message GetResponseRequestSingle {
  GetResponseRequest response_config = 1;
  GetResponseRequest response_data = 2;
}

message GetResponseResponse {
    message AudioResponse {
        bytes audio_data = 1;
        AudioConfig audio_config = 2;
        string text_data = 3;
        bool end_of_response = 4;
        string face_data = 5;
        oneof face_data_type {
            VisemesData visemes_data = 6;
            BlendShapesData blendshapes_data = 7;
        }
        ARKitBlendShapesData face_emotion = 8;
    }

  message ActionResponse {
    string action = 1;
  }

  message BehaviorTreeResponse {
    // Behavior tree code uploaded by user at the time of narration design.
    string bt_code = 1;
    // Json dump.
    string bt_constants = 2;
    // Current Narrative section-id for the character.
    string narrative_section_id = 3;
  }

  message UserTranscript {
    string text_data = 1;
    bool is_final = 2;
    bool end_of_response = 3;
  }
  string session_id = 1;
  oneof response_type {
    ActionResponse action_response = 2;
    AudioResponse audio_response = 3;
    string debug_log = 4;
    UserTranscript user_query = 5;
    BehaviorTreeResponse bt_response = 6;
    string emotion_response = 7;
    string interaction_id = 8;
  }
}

message VisemesData {
    Viseme visemes = 1;
}

// Define the Viseme message with all the individual viseme values
message Viseme {
    float sil = 1;
    float pp = 2;
    float ff = 3;
    float th = 4;
    float dd = 5;
    float kk = 6;
    float ch = 7;
    float ss = 8;
    float nn = 9;
    float rr = 10;
    float aa = 11;
    float e = 12;
    float ih = 13;
    float oh = 14;
    float ou = 15;
}

message BlendShapesData {
    string blendshape_data = 1;
}

message HelloRequest {
  string name = 1;
}
message HelloResponse {
  string message = 1;
}

message FeedbackRequest {
  message Feedback{
    bool thumbs_up = 1;
    string feedback_text = 2; 
  }
  
  string interaction_id = 1; 
  string character_id = 2;
  string session_id = 3;
  // Feedback for the Text Response.
  Feedback text_feedback = 5;
}

message FeedbackResponse {
  string feedback_response = 1;
}